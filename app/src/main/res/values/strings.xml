<resources xmlns:xliff="http://schemas.android.com/apk/res-auto">
    <string name="app_name">5 Things You Didn\'t Know About Git</string>
    <string name="thing_1">Creating new commits in the middle of the commit history</string>
    <string name="thing_2">Committing as another person</string>
    <string name="thing_3">Committing at any date</string>
    <string name="thing_4">Mastering Git tags</string>
    <string name="thing_5">Adopting software development best practices with Git</string>
    <string name="title_activity_repository_name">Info of the repository</string>
    <string name="subtitle_activity_repository">The info of your repository will be use in the content of the texts of the app.</string>
    <string name="save">Save</string>
    <string name="use_default_name">Use default name</string>
    <string name="newcommits_1">1. Commit what do you want</string>
    <string name="newcommits_2">2. Do a Git Interactive-Rebase to the point of history (commit) you want to do rewrite the history:</string>
    <string name="newcommits_cmd_1" translatable="false">git rebase -i 1ec6d53</string>
    <string name="newcommits_3">3. In the editor, do the reorganization of the commits in the file, according to the Git Rebase commands listed: https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History</string>
    <string name="newcommits_2_obs_1">with the SHA hash of the \"temporary HEAD\" commit (\"parent\" commit of what you want to edit, not the new commit to include!)</string>
    <string name="newcommits_or">or...</string>
    <string name="newcommits_cmd_2" translatable="false">git rebase -i HEAD~3</string>
    <string name="newcommits_2_obs_2">that rollbacks 3 commits, for example.</string>
    <string name="newcommits_4">4. The modified commits with Rebase now have different Commiter and CommitDate. To undo this (\"Author\" and \"AuthorDate\" be the same that \"Commiter\" and \"CommitDate\"), use the following command:</string>
    <string name="newcommits_cmd_3" translatable="false">git filter-branch -f --env-filter \'GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE; GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME; GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL; export GIT_COMMITTER_DATE GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL\'</string>
    <string name="newcommits_4_obs_1">4.1. If the commits don\'t have Author and/or Email (or if you want to make all the commits have with only one author) use:</string>
    <string name="newcommits_cmd_4" translatable="false">git filter-branch -f --env-filter \'GIT_AUTHOR_NAME=\"Fulano de Tal\"; GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME; GIT_AUTHOR_EMAIL=\"gustavosotnas1@gmail.com\"; GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL; export GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL\'</string>
    <string name="hint_activity_repository_2">AuthorName used in Git (ex.: %1$s)</string>
    <string name="hint_activity_repository_3">AuthorEmail used in Git (ex.: %1$s)</string>
    <string name="example_repository_name">my-git-repository</string>
    <string name="hint_activity_repository">Git repository name (ex.: <xliff:g name="name">%s</xliff:g>)</string>
</resources>
