<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">5 coisas que você não sabia sobre o Git</string>
    <string name="thing_1">Criando novos commits no meio do histórico</string>
    <string name="thing_2">Commitando como outra pessoa</string>
    <string name="thing_3">Commitando em qualquer data</string>
    <string name="thing_4">Masterizando Git tags</string>
    <string name="thing_5">Adotando boas práticas de desenvolvimento de software com Git</string>
    <string name="title_activity_repository_name">Nome do repositório</string>
    <string name="subtitle_activity_repository">O nome do seu repositório será usado no conteúdo dos textos do aplicativo.</string>
    <string name="hint_activity_repository">meu-repositorio-git</string>
    <string name="save">Salvar</string>
    <string name="use_default_name">Usar nome padrão</string>
    <string name="newcommits_1">1. Commite o que você quiser</string>
    <string name="newcommits_2">2. Faça um Git Rebase-Interativo para o ponto do histórico (commit) que você quer reescrever:</string>
    <string name="newcommits_3">3. No editor, faça a reorganização dos commits no arquivo, de acordo com os comandos de Git Rebase listados: https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History</string>
    <string name="newcommits_2_obs_1">com a hash SHA do commit \"HEAD temporário\" (commit \"pai\" do que você quer editar, não o novo commit para incluir!)</string>
    <string name="newcommits_or">ou...</string>
    <string name="newcommits_2_obs_2">que volta 3 commits, por exemplo.</string>
    <string name="newcommits_4">4. Os commits modificados com Rebase agora tem commitador e data do commit diferentes. Para desfazer isso (\"Author\" e \"AuthorDate\" ser o mesmo que \"Commiter\" e \"CommitDate\"), use o seguinte comando:</string>
    <string name="newcommits_4_obs_1">4.1. Se os commits não tem um Author e/ou Email (ou se você quiser fazer todos os commits ficarem com um único autor) use:</string>

    <string name="committing_person_1">1. Criar um commit usando credenciais de outra pessoa é util
        para quando um grupo tiver usando o computador de um colega de projeto para criar ou
        modificar um código, e a pessoa não quer modificar as configurações de `Git config
        \"username\" and \"email\"` (uma atividade de programação em pares como no
        <a href="https://en.wikipedia.org/wiki/Extreme_programming">XP</a>, por exemplo). Criar um
        commit como outra pessoa é relativamente fácil. Mas primeiro, veja o histórico detalhado de
        commits do seu repositório:</string>
    <string name="committing_person_1_obs_1">Note na lista de commits que temos dois campos
        idênticos com outros dois campos: <i>Author</i> com <i>Commit</i>, e <i>AuthorDate</i>
        com <i>CommitDate</i>. Iremos escrever os valores desses campos manualmente dessa forma:
    </string>
    <string name="committing_person_1_obs_2">Substituindo os valores de acordo com suas necessidades.
    </string>
    <string name="committing_person_1_1">1.1. Você pode combinar isto com <i>amend</i> ou <i>rebase
        interativo</i>, até commitar em qualquer data, como
        neste exemplo:</string>
</resources>